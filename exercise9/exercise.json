{
    "id": 8, 
    "description": "It takes a set of words into input, returns the ordered list of all the words you can create by merging the words into the starting set", 
    "text": "Two words can be merged if the first word has a suffix of at least\n   two characters that is equal to the prefix of equal length of the\n   second word.\n   The result of the fusion is the word obtained by concatenating the\n   first word with the second thanks to the part in common.\n   For example:  \n   - the two words 'candela' and 'elastico' can merge thanks to the\n     suffix 'ela' of 3 characters, and the result of the fusion is the\n     word 'candelastico'.\n   - the words 'Angelo' and 'gelo' can merge thanks to the suffix\n     'gelo', the word resulting is 'Angelo'.\n   - the words 'aaaaa' and 'aaab' can merge in different ways: \n     - thanks to the suffix 'aa' you get the fusion 'aaaaaab'. \n     - thanks to the suffix 'aaa' you get the fusion 'aaaaab'.\n\n    Define function es8(word_set) that, given a set of words, returns\n    the list with all the possible words resulting from a fusion of\n    two words of word_set. Any duplicate in the list is removed. The\n    list is sorted in alphabetical order.\n  \n    For example:\n\n    - if word_set={'aaaa', 'acde', 'aacd', 'aaaade'}, the function\n      returns the list:\n\n     ['aaaaaade', 'aaaaade', 'aaaacd', 'aaaade', 'aacde'] \n     thanks to the following fusions:\n     'aaaa'  'aaaade' ---> 'aaaaaade' with suffix 'aa'\n     'aaaa'  'aaaade' ---> 'aaaaade'  with suffix 'aaa'\n     'aaaa'  'aaaade' ---> 'aaaade'   with suffix 'aaaa'\n     'aaaa'  'aacd'   ---> 'aaaacd'   with suffix 'aa'\n     'aacd'  'acde'   ---> 'aacde'    with suffix 'acd'\n\n", 
    "algorithm": "I initialize an empty list\nfor each word p in the set\n\tfor every word p2 in the set(except p)\n\t\tcheck if from the last 2 letters until the beginning of p, p coincides with the beginning of p2\n\t\t\tif yes: I create the new word and add it to the list\n\t\t\totherwise I continue\nI remove duplicates from the list and order it\nreturn the list", 
    "tags": ["Sorting", "Strings"], 
    "effort": 3,
    "clues": [],
    "from":"esame-8-1-19"
}
