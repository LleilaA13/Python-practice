{
    "id": 70,
    "description": "Given a path to a directory, a list of file extensions and a list of strings, search in the directory, recursively, how many times the list strings are present in the files that do not have extensions in the list, a dictionary returns with the results.",
    "text": "Design a function es70(dirname, extensions, words) such that:\n    - it is recursive or uses recursive functions(s)/method(s),\n    - it receives as arguments:\n      - a directory pathname 'dirname', \n      - a list of strings 'extensions' representing the ending part of\n         filenames, a list of strings 'words' that do not contain\n      - spaces/tab/newlines\n    - it counts how many times the strings in 'words' are present in\n      the files which name does NOT end with any of the indicated\n      extensions, ignoring any distingcion between upper and lower\n      case,\n    - it returns a dictionary where:\n       - the keys are the searched words in lower case\n       - the related values are the number of times (>0) that the\n          word appear (regardless of upper/lower case) overall the files\n          which name does not end with any of the given extensions.\n\n    Note: if a word only appears in files ending with the given\n    extensions, it is not included in the dictionary.\n\n    Note: assume that all the files in 'dirname' and its\n    subdirectories are text files regardless of their extension.\n",
    "algorithm": "Convert all words in the list to lowercase \n initialize the count dictionary for each word with value 0 \n for each filename in the directory: \n\t creates the path to the file \n\t if the file is a directory: \n\t\tcalls the function es70(...) on the directory, saves the returned result in a diz variable \n\t\tfor each key-value diz: \n\t\t\tupdate the count dictionary \n\t if the file does not end with one of the extensions: \n\t\topen the file: \n\t\t\tfor each line: \n\t\t\t\tfor each word: \n\t\t\t\t\tturns the word into lowercase \n\t\t\t\t\tif the word is in words: \n\t\t\t\t\t\t increase the counter of the word in the count dictionary \n for each k key: \n\tif the value of the key is 0: \n\t\tdeletes the key from the count dictionary \n returns the count dictionary",
    "tags": ["File Search", "Recursion", "Files"],
    "effort": 4,
    "clues": [],
    "from": "esame-15-2-18"
}
